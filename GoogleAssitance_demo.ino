/***************************************************
DATE:29/10/2018 3:11PM    

GoogleAssitance_demo.ino : 
 -->Controll your home appliances (or LEDs) using your voice.
 --> Hardware :Bread Board Wemos D1 Mini Board, Led, Resistors,
               Relay Module, USB Cable.
 -->Software:Arduino Ide(version 1.8.5), Google Assistant and IFTTT App in Your Smart Phone, an Active Account on Adafruit.io Mqtt Broker
 -->you have to download adafruit_mqtt_library from here https://github.com/adafruit/Adafruit_MQTT_Library.
 just visit :  http://opencorner.io/ for tutorials.

 

 ****************************************************/
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

/************************ WiFi Access Point ********************************/

#define WLAN_SSID       "YOUR ROUTER SSID"      //write your router's SSID or your mobile hotspot's name
#define WLAN_PASS       "YOUR ROUTER PASSWORD"  //write yout router's password or password of your mobile hotspot

/************************ Adafruit.io Setup ********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "YOUR USERNAME"        //write username of your adafruit.io account 
#define AIO_KEY         "YOUR PASSWORD"        //paste autogenerated key of your adafruit.io account

/*********** Global State (you don't need to change this!) *****************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/***************************** Feeds **************************************/

// Setup a feed called 'photocell' for publishing.
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
//Adafruit_MQTT_Publish photocell = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/photocell");

// Setup a feed called 'onoff' for subscribing to changes.
const char Relay1[] PROGMEM = AIO_USERNAME "/feeds/light";     // 
Adafruit_MQTT_Subscribe light= Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/light");

const char Relay2[] PROGMEM = AIO_USERNAME "/feeds/light1";
Adafruit_MQTT_Subscribe light1= Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/light1");

/************************** Sketch Code ***********************************/

// Bug workaround for Arduino 1.6.6, it seems to need a function declaration
// for some reason (only affects ESP8266, likely an arduino-builder bug).
void MQTT_connect();

void setup() {
  Serial.begin(115200);
  delay(10);
  pinMode(D1,OUTPUT);
  pinMode(D2,OUTPUT);

  Serial.println(F("Adafruit MQTT demo"));

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&light);
  mqtt.subscribe(&light1);
}

uint32_t x=0;

void loop() {
  // Ensure the connection to the MQTT server is alive (this will make the first
  // connection and automatically reconnect when disconnected).  See the MQTT_connect
  // function definition further below.
  MQTT_connect();

  // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here

  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {
    if (subscription == &light) {
      Serial.print(F("Got_Light: "));
      Serial.println((char *)light.lastread);
      uint16_t num = atoi((char *)light.lastread);
      digitalWrite(D1,num);
    }
    if (subscription == &light1) {
      Serial.print(F("Got_Light1: "));
      Serial.println((char *)light1.lastread);
      uint16_t num = atoi((char *)light1.lastread);
      digitalWrite(D2,num);
    }
  }
}



// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}
